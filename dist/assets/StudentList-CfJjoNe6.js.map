{"version":3,"file":"StudentList-CfJjoNe6.js","sources":["../../src/components/StudentList.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback, useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { auth, db } from \"../firebase\";\nimport { collection, collectionGroup, doc, documentId, getDoc, getDocs, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n  faUsers, \n  faFilter, \n  faSearch, \n  faExclamationTriangle, \n  faUserGraduate, \n  faChalkboardTeacher, \n  faClock,\n  faCheckCircle,\n  faEnvelope,\n  faGraduationCap,\n  faIdCard,\n  faArrowRight,\n  faSync,\n  faRocket,\n  faArrowLeft\n} from '@fortawesome/free-solid-svg-icons';\n\n// Ultra-fast cache management\nconst CACHE_KEY = \"studentsCache_v2\";\nconst CACHE_TIMESTAMP_KEY = \"studentsCacheTimestamp\";\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nconst StudentList = () => {\n  const [students, setStudents] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortOption, setSortOption] = useState(\"name\");\n  const [loading, setLoading] = useState(false); // Start with false for instant display\n  const [error, setError] = useState(null);\n  const [coursesMeta, setCoursesMeta] = useState([]);\n  const [courseFilter, setCourseFilter] = useState(\"\");\n  const [courseIdFilter, setCourseIdFilter] = useState(\"\");\n  const [courseToStudentIds, setCourseToStudentIds] = useState({});\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loadTime, setLoadTime] = useState(0);\n  \n  const navigate = useNavigate();\n\n  // Performance tracking\n  const startTime = useRef(Date.now());\n  const dataFetched = useRef(false);\n\n  // Instant cache retrieval - runs synchronously\n  const getCachedData = useCallback(() => {\n    try {\n      const cached = localStorage.getItem(CACHE_KEY);\n      const timestamp = localStorage.getItem(CACHE_TIMESTAMP_KEY);\n      \n      if (cached && timestamp) {\n        const age = Date.now() - parseInt(timestamp);\n        if (age < CACHE_DURATION) {\n          const parsed = JSON.parse(cached);\n          if (Array.isArray(parsed) && parsed.length > 0) {\n            return parsed;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(\"Cache read failed:\", error);\n    }\n    return null;\n  }, []);\n\n  // DYNAMIC UNIVERSAL FETCH - Works with any Firestore structure\n  const fetchDataUltraFast = useCallback(async (user) => {\n    if (!user || dataFetched.current) return;\n    \n    dataFetched.current = true;\n    const fetchStart = Date.now();\n    \n    try {\n      console.log(\"🚀 Dynamic course fetch starting for user:\", user.uid);\n      \n      // Step 1: Fetch faculty data to get course IDs\n      let facultyData = null;\n      try {\n        // Try multiple faculty paths dynamically\n        const facultyPathVariations = [\n          ['faculty', facultyData?.departmentKey || 'CSE_DS', 'members', user.uid],\n          ['faculty', 'CSE_DS', 'members', user.uid],\n          ['faculty', 'CSEDS', 'members', user.uid],\n          ['faculty', 'CSE', 'members', user.uid],\n          ['faculty', user.uid],\n          ['users', 'faculty', user.uid],\n        ];\n\n        for (const pathSegments of facultyPathVariations) {\n          try {\n            const facultyRef = doc(db, ...pathSegments);\n            const facultySnap = await getDoc(facultyRef);\n            if (facultySnap.exists()) {\n              facultyData = facultySnap.data();\n              console.log(\"✅ Faculty data fetched:\", facultyData.name);\n              break;\n            }\n          } catch (error) {\n            // Continue to next variation\n          }\n        }\n      } catch (error) {\n        console.log(\"❌ Could not fetch faculty data:\", error);\n      }\n\n      // Step 2: Get course IDs from faculty data\n      const allCourseIds = [];\n      \n      if (facultyData?.courses && Array.isArray(facultyData.courses)) {\n        allCourseIds.push(...facultyData.courses);\n      }\n      \n      if (facultyData?.teaching) {\n        Object.keys(facultyData.teaching).forEach(section => {\n          if (Array.isArray(facultyData.teaching[section])) {\n            allCourseIds.push(...facultyData.teaching[section]);\n          }\n        });\n      }\n      \n      const uniqueCourseIds = [...new Set(allCourseIds)];\n      console.log(\"📚 Course IDs from faculty data:\", uniqueCourseIds);\n\n      // Step 3: Dynamic course fetching\n      let foundCourses = [];\n\n      if (uniqueCourseIds.length > 0) {\n        console.log(\"🚀 Dynamic course fetch using course IDs:\", uniqueCourseIds);\n        \n        // Dynamic course fetching function\n        const fetchCourseDynamically = async (courseId) => {\n                  // Strategy 1: Try collectionGroup query first (universal)\n        try {\n          const cg = collectionGroup(db, \"courseDetails\");\n          const q = query(cg, where(documentId(), \"==\", courseId));\n          const snap = await getDocs(q);\n          if (!snap.empty) {\n            const courseData = snap.docs[0].data();\n            console.log(\"✅ Found course via collectionGroup:\", courseData.courseName);\n            return {\n              id: courseId,\n              year: courseData.displayYear || \"III\",\n              section: courseData.displaySection || \"A\",\n              semester: courseData.displaySemester || \"5\",\n              courseName: courseData.courseName || `Course ${courseId}`,\n              courseCode: courseData.courseCode || courseId,\n              instructorName: facultyData?.name,\n              instructor: courseData.instructor,\n              department: courseData.displayDepartment || \"Computer Science & Engineering (Data Science)\",\n              credits: courseData.credits || 3,\n              description: courseData.description || `Course ${courseId} - ${facultyData?.name}`,\n              studentsBySection: courseData.studentsBySection || {},\n              masterCoursePath: courseData.masterCoursePath,\n              semesterKey: courseData.semesterKey || \"III_5\",\n              students: courseData.students || []\n            };\n          }\n        } catch (error) {\n          console.log(\"❌ CollectionGroup failed for course:\", courseId);\n        }\n\n                  // Strategy 2: Try multiple path variations dynamically\n        const pathVariations = [\n          // Dynamic department-based paths\n          ['courses', facultyData?.departmentKey || 'CSE_DS', 'year_sem', 'III_5', 'courseDetails', courseId],\n          ['courses', facultyData?.departmentKey || 'CSE_DS', 'year_sem', 'III_6', 'courseDetails', courseId],\n          ['courses', facultyData?.departmentKey || 'CSE_DS', 'year_sem', 'III_7', 'courseDetails', courseId],\n          ['courses', facultyData?.departmentKey || 'CSE_DS', 'year_sem', 'III_8', 'courseDetails', courseId],\n          // Generic department variations\n          ['courses', 'CSE_DS', 'year_sem', 'III_5', 'courseDetails', courseId],\n          ['courses', 'CSEDS', 'year_sem', 'III_5', 'courseDetails', courseId],\n          ['courses', 'CSE', 'year_sem', 'III_5', 'courseDetails', courseId],\n          // Direct course structure\n          ['courses', courseId],\n          ['courseDetails', courseId],\n        ];\n\n          \n\n          for (const pathSegments of pathVariations) {\n            try {\n              const coursePath = doc(db, ...pathSegments);\n              const courseSnap = await getDoc(coursePath);\n              if (courseSnap.exists()) {\n                const courseData = courseSnap.data();\n                console.log(\"✅ Found course via path variation:\", pathSegments.join('/'));\n                return {\n                  id: courseId,\n                  year: courseData.displayYear || \"III\",\n                  section: courseData.displaySection || \"A\",\n                  semester: courseData.displaySemester || \"5\",\n                  courseName: courseData.courseName || `Course ${courseId}`,\n                  courseCode: courseData.courseCode || courseId,\n                  instructorName: facultyData?.name,\n                  instructor: courseData.instructor,\n                  department: courseData.displayDepartment || \"Computer Science & Engineering (Data Science)\",\n                  credits: courseData.credits || 3,\n                  description: courseData.description || `Course ${courseId} - ${facultyData?.name}`,\n                  studentsBySection: courseData.studentsBySection || {},\n                  masterCoursePath: courseData.masterCoursePath,\n                  semesterKey: courseData.semesterKey || \"III_5\",\n                  students: courseData.students || []\n                };\n              }\n            } catch (error) {\n              // Continue to next variation\n            }\n          }\n\n          console.log(\"❌ No course found for ID:\", courseId);\n          return null;\n        };\n\n        // Fetch all courses dynamically\n        const coursePromises = uniqueCourseIds.map(courseId => fetchCourseDynamically(courseId));\n        const results = await Promise.all(coursePromises);\n        foundCourses = results.filter(course => course !== null);\n        console.log(\"✅ Dynamic fetch found:\", foundCourses.length, \"courses\");\n      }\n\n      // Step 3: Extract all student IDs and group by year/section\n      const studentIdGroups = new Map();\n      const courseMeta = [];\n      \n      foundCourses.forEach(course => {\n        courseMeta.push({\n          id: course.id,\n          name: course.courseName,\n          year: course.year,\n          section: course.section,\n          semester: course.semester\n        });\n        \n        // Handle different student data structures\n        if (course.studentsBySection && typeof course.studentsBySection === 'object') {\n          console.log(\"📚 Found studentsBySection structure for course:\", course.courseName);\n          Object.keys(course.studentsBySection).forEach(sectionKey => {\n            if (Array.isArray(course.studentsBySection[sectionKey])) {\n              course.studentsBySection[sectionKey].forEach(studentId => {\n                const key = `${course.year}|${sectionKey}`;\n                if (!studentIdGroups.has(key)) {\n                  studentIdGroups.set(key, new Set());\n                }\n                studentIdGroups.get(key).add(studentId);\n              });\n            }\n          });\n        } else if (course.students && Array.isArray(course.students)) {\n          console.log(\"📚 Found students array structure for course:\", course.courseName);\n          course.students.forEach(student => {\n            const sid = typeof student === 'string' ? student : (student?.id || student?.studentId || student);\n            if (sid) {\n              const key = `${course.year}|${course.section}`;\n              if (!studentIdGroups.has(key)) {\n                studentIdGroups.set(key, new Set());\n              }\n              studentIdGroups.get(key).add(sid);\n            }\n          });\n        }\n      });\n\n      setCoursesMeta(courseMeta);\n\n      // Step 4: Dynamic student fetching\n      const allStudentQueries = [];\n      const courseToStudentMap = {};\n\n      // Build course to student mapping\n      foundCourses.forEach(course => {\n        courseToStudentMap[course.id] = [];\n        \n        if (course.studentsBySection && typeof course.studentsBySection === 'object') {\n          Object.keys(course.studentsBySection).forEach(sectionKey => {\n            if (Array.isArray(course.studentsBySection[sectionKey])) {\n              course.studentsBySection[sectionKey].forEach(studentId => {\n                courseToStudentMap[course.id].push(studentId);\n              });\n            }\n          });\n        } else if (course.students && Array.isArray(course.students)) {\n          course.students.forEach(student => {\n            const sid = typeof student === 'string' ? student : (student?.id || student?.studentId || student);\n            if (sid) courseToStudentMap[course.id].push(sid);\n          });\n        }\n      });\n\n      setCourseToStudentIds(courseToStudentMap);\n\n      // Dynamic student fetching with multiple path variations\n      for (const [key, idSet] of studentIdGroups.entries()) {\n        const [year, section] = key.split('|');\n        const ids = Array.from(idSet);\n        \n        console.log(`📚 Fetching ${ids.length} students for ${year}-${section}`);\n        \n        // Dynamic student detail fetching\n        const studentPromises = ids.map(async (studentId) => {\n          const studentPathVariations = [\n            // Dynamic department-based paths\n            ['students', facultyData?.departmentKey || 'CSEDS', `${year}-${section}`, studentId],\n            ['students', facultyData?.departmentKey || 'CSE_DS', `${year}_${section}`, studentId],\n            // Generic department variations\n            ['students', 'CSEDS', `${year}-${section}`, studentId],\n            ['students', 'CSE_DS', `${year}_${section}`, studentId],\n            ['students', 'CSE', `${year}-${section}`, studentId],\n            // Common section variations\n            ['students', 'CSEDS', 'III-A', studentId],\n            ['students', 'CSE_DS', 'III_A', studentId],\n            ['students', 'CSE', 'III-A', studentId],\n            ['students', 'CSEDS', 'III-B', studentId],\n            ['students', 'CSE_DS', 'III_B', studentId],\n            ['students', 'CSEDS', 'III-C', studentId],\n            ['students', 'CSE_DS', 'III_C', studentId],\n            // Direct student structure\n            ['students', studentId],\n            ['studentDetails', studentId],\n          ];\n\n          for (const pathSegments of studentPathVariations) {\n            try {\n              const studentPath = doc(db, ...pathSegments);\n              const studentSnap = await getDoc(studentPath);\n              if (studentSnap.exists()) {\n                return { \n                  id: studentId, \n                  year, \n                  section,\n                  ...studentSnap.data() \n                };\n              }\n            } catch (error) {\n              // Continue to next variation\n            }\n          }\n\n          // Fallback student data\n          return { \n            id: studentId, \n            name: `Student ${studentId}`, \n            rollNo: studentId,\n            year,\n            section\n          };\n        });\n\n        allStudentQueries.push(Promise.all(studentPromises));\n      }\n\n      // Step 5: Execute all queries simultaneously\n      const studentResults = await Promise.all(allStudentQueries);\n      const allStudents = [];\n      studentResults.forEach(students => allStudents.push(...students));\n\n      // Step 6: Remove duplicates and set state\n      const uniqueStudents = allStudents.filter((student, index, self) => \n        index === self.findIndex(s => s.id === student.id)\n      );\n\n      setStudents(uniqueStudents);\n      \n      // Step 7: Cache the results\n      try {\n        localStorage.setItem(CACHE_KEY, JSON.stringify(uniqueStudents));\n        localStorage.setItem(CACHE_TIMESTAMP_KEY, Date.now().toString());\n      } catch (error) {\n        console.log(\"Cache write failed:\", error);\n      }\n\n      const loadTime = Date.now() - fetchStart;\n      setLoadTime(loadTime);\n      console.log(`🚀 Data loaded in ${loadTime}ms`);\n      \n    } catch (error) {\n      console.error(\"Ultra-fast fetch failed:\", error);\n      setError(\"Failed to load students. Please try again.\");\n    } finally {\n      setLoading(false);\n      setIsRefreshing(false);\n    }\n  }, []);\n\n  // Instant display from cache, then background refresh\n  useEffect(() => {\n    const cachedData = getCachedData();\n    if (cachedData) {\n      setStudents(cachedData);\n      setLoading(false);\n      // Start background refresh\n      setIsRefreshing(true);\n    } else {\n      setLoading(true);\n    }\n  }, [getCachedData]);\n\n  // Background data fetching\n  useEffect(() => {\n    let unsubscribe;\n    \n    const initializeData = async () => {\n      unsubscribe = onAuthStateChanged(auth, async (user) => {\n        if (!user) {\n          setError(\"No user is logged in.\");\n          setLoading(false);\n          setIsRefreshing(false);\n          return;\n        }\n\n        // If we have cached data, refresh in background\n        if (students.length > 0) {\n          fetchDataUltraFast(user);\n        } else {\n          // No cache, fetch immediately\n          await fetchDataUltraFast(user);\n        }\n      });\n    };\n\n    initializeData();\n    return () => {\n      if (unsubscribe) unsubscribe();\n    };\n  }, [fetchDataUltraFast, students.length]);\n\n  // Optimized filtering and sorting\n  const filteredStudents = useMemo(() => {\n    let base = students;\n    \n    // Apply course filters\n    if (courseFilter) {\n      const ids = new Set(courseToStudentIds[courseFilter] || []);\n      base = base.filter(s => ids.has(s.id));\n    }\n    \n    if (courseIdFilter.trim()) {\n      const ids = new Set(courseToStudentIds[courseIdFilter.trim()] || []);\n      base = base.filter(s => ids.has(s.id));\n    }\n    \n    // Apply search filter\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      base = base.filter(student =>\n        (student.name || '').toLowerCase().includes(term) ||\n        (student.email || '').toLowerCase().includes(term) ||\n        (student.rollNo || '').toLowerCase().includes(term)\n      );\n    }\n    \n    // Apply sorting\n    return base.sort((a, b) => {\n      if (sortOption === \"name\") {\n        return (a.name || '').localeCompare(b.name || '');\n      }\n      return 0;\n    });\n  }, [students, searchTerm, sortOption, courseFilter, courseIdFilter, courseToStudentIds]);\n\n  // Force refresh function\n  const handleRefresh = useCallback(async () => {\n    setIsRefreshing(true);\n    dataFetched.current = false;\n    \n    // Clear cache\n    try {\n      localStorage.removeItem(CACHE_KEY);\n      localStorage.removeItem(CACHE_TIMESTAMP_KEY);\n    } catch (error) {\n      console.log(\"Cache clear failed:\", error);\n    }\n    \n    const user = auth.currentUser;\n    if (user) {\n      await fetchDataUltraFast(user);\n    }\n  }, [fetchDataUltraFast]);\n\n  if (loading && students.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-12 animate-fade-in\">\n            <div className=\"h-16 bg-gray-200 rounded-2xl mb-6 animate-pulse\"></div>\n            <div className=\"h-8 bg-gray-200 rounded-xl w-1/3 animate-pulse\"></div>\n          </div>\n          <div className=\"grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3\">\n            {Array.from({ length: 9 }).map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl shadow-xl p-8 animate-fade-in border border-gray-100\" style={{ animationDelay: `${i * 50}ms` }}>\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-20 h-20 bg-gray-200 rounded-full mr-6 animate-pulse\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-3 animate-pulse\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2 animate-pulse\"></div>\n                  </div>\n                </div>\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3 animate-pulse\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2 animate-pulse\"></div>\n                </div>\n                <div className=\"flex gap-3 mb-6\">\n                  <div className=\"h-8 w-20 bg-gray-200 rounded-full animate-pulse\"></div>\n                  <div className=\"h-8 w-24 bg-gray-200 rounded-full animate-pulse\"></div>\n                </div>\n                <div className=\"h-6 w-24 bg-gray-200 rounded animate-pulse\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && students.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 flex items-center justify-center p-8\">\n        <div className=\"bg-white rounded-2xl shadow-xl p-12 text-center border border-gray-100\">\n          <FontAwesomeIcon icon={faExclamationTriangle} className=\"text-blue-600 text-6xl mb-6 animate-bounce\" />\n          <div className=\"text-gray-800 text-xl font-semibold mb-6\">{error}</div>\n          <button\n            onClick={handleRefresh}\n            className=\"btn-campus-primary inline-flex items-center gap-3 px-8 py-4 rounded-xl shadow-lg transition-all duration-300 text-lg font-medium\"\n          >\n            <FontAwesomeIcon icon={faSync} />\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"page-container\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-2xl font-semibold text-gray-900\">Students</h1>\n            <span className=\"text-xs text-gray-500\">{loadTime > 0 ? `Loaded in ${loadTime}ms` : 'Loading...'}</span>\n            {isRefreshing && (\n              <span className=\"flex items-center gap-1 text-xs text-blue-600\">\n                <FontAwesomeIcon icon={faSync} className=\"animate-spin\" />\n                Refreshing\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"text-right\">\n              <div className=\"text-xl font-semibold text-gray-900\">{filteredStudents.length}</div>\n              <div className=\"text-xs text-gray-500\">Total Students</div>\n            </div>\n            <button\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className=\"btn-campus-primary inline-flex items-center gap-2 px-4 py-2 rounded-md text-sm disabled:opacity-50\"\n            >\n              <FontAwesomeIcon icon={faSync} className={isRefreshing ? 'animate-spin' : ''} />\n              Refresh\n            </button>\n          </div>\n        </div>\n\n        <div className=\"compact-card mb-6\">\n          <div className=\"grid gap-3 md:grid-cols-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <FontAwesomeIcon icon={faSearch} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search students by name, email, or roll number...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-3 py-2 rounded-md border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-sm bg-gray-50\"\n                />\n              </div>\n            </div>\n            <div>\n              <select\n                value={sortOption}\n                onChange={(e) => setSortOption(e.target.value)}\n                className=\"w-full px-3 py-2 rounded-md border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-sm bg-gray-50\"\n              >\n                <option value=\"name\">Sort by Name</option>\n                <option value=\"rollNo\">Sort by Roll No</option>\n              </select>\n            </div>\n            <div>\n              <select\n                value={courseFilter}\n                onChange={(e) => setCourseFilter(e.target.value)}\n                className=\"w-full px-3 py-2 rounded-md border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-sm bg-gray-50\"\n              >\n                <option value=\"\">All Courses</option>\n                {coursesMeta.map((course) => (\n                  <option key={course.id} value={course.id}>\n                    {course.name} ({course.year}-{course.section})\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <section className=\"grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredStudents.map((student, index) => (\n            <div\n              key={student.id}\n              className=\"group bg-white rounded-lg border p-4 hover:shadow-sm animate-fade-in cursor-pointer transition-all\"\n              style={{ animationDelay: `${index * 50}ms` }}\n              onClick={() => navigate(`/students/${student.year || 'II'}/${student.section || 'A'}/${student.id}`)}\n            >\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 rounded-full bg-blue-50 text-blue-600 flex items-center justify-center mr-3\">\n                  <FontAwesomeIcon icon={faUserGraduate} className=\"text-sm\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-sm font-semibold text-gray-900 truncate\">{student.name || 'Unknown'}</h3>\n                  <p className=\"text-xs text-gray-600\">{student.rollNo || 'N/A'}</p>\n                </div>\n                <div className=\"w-2.5 h-2.5 bg-green-500 rounded-full\"></div>\n              </div>\n              \n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n                  <FontAwesomeIcon icon={faEnvelope} className=\"text-blue-600 text-sm\" />\n                  <span className=\"truncate\">{student.email || 'No email'}</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n                  <FontAwesomeIcon icon={faIdCard} className=\"text-blue-600 text-sm\" />\n                  <span>{student.rollNo || 'No Roll No'}</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n                  <FontAwesomeIcon icon={faGraduationCap} className=\"text-blue-600 text-sm\" />\n                  <span>{student.year || 'N/A'}-{student.section || 'N/A'}</span>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 mb-4\">\n                <span className=\"status-active inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\">\n                  <FontAwesomeIcon icon={faCheckCircle} className=\"mr-1\" />\n                  Active\n                </span>\n                <span className=\"status-completed inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\">\n                  {student.year || 'N/A'}-{student.section || 'N/A'}\n                </span>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <button\n                  type=\"button\"\n                  onClick={(e) => { e.stopPropagation(); navigate(`/students/${student.year || 'II'}/${student.section || 'A'}/${student.id}`); }}\n                  className=\"inline-flex items-center gap-1.5 text-blue-600 hover:text-blue-700 font-medium transition-all text-sm\"\n                >\n                  View Details\n                  <FontAwesomeIcon icon={faArrowRight} className=\"transition-transform group-hover:translate-x-1\" />\n                </button>\n              </div>\n            </div>\n          ))}\n        </section>\n\n                      {filteredStudents.length === 0 && !loading && (\n                <div className=\"text-center py-16\">\n                  <div className=\"bg-white rounded-2xl shadow-xl p-12 border border-gray-100\">\n                    <FontAwesomeIcon icon={faUsers} className=\"text-gray-400 text-6xl mb-6\" />\n                    <h3 className=\"text-2xl font-semibold text-gray-700 mb-3\">No students found</h3>\n                    <p className=\"text-gray-600 text-lg\">Try adjusting your search or filter criteria.</p>\n                  </div>\n                </div>\n              )}\n      </div>\n    </div>\n  );\n};\n\nexport default StudentList;\n\n"],"names":["CACHE_KEY","CACHE_TIMESTAMP_KEY","CACHE_DURATION","StudentList","students","setStudents","useState","searchTerm","setSearchTerm","sortOption","setSortOption","loading","setLoading","error","setError","coursesMeta","setCoursesMeta","courseFilter","setCourseFilter","courseIdFilter","setCourseIdFilter","courseToStudentIds","setCourseToStudentIds","isRefreshing","setIsRefreshing","loadTime","setLoadTime","navigate","useNavigate","useRef","dataFetched","getCachedData","useCallback","cached","timestamp","parsed","fetchDataUltraFast","user","fetchStart","facultyData","facultyPathVariations","pathSegments","facultyRef","doc","db","facultySnap","getDoc","allCourseIds","section","uniqueCourseIds","foundCourses","fetchCourseDynamically","courseId","cg","collectionGroup","q","query","where","documentId","snap","getDocs","courseData","pathVariations","coursePath","courseSnap","coursePromises","course","studentIdGroups","courseMeta","sectionKey","studentId","key","student","sid","allStudentQueries","courseToStudentMap","idSet","year","ids","studentPromises","studentPathVariations","studentPath","studentSnap","studentResults","allStudents","uniqueStudents","index","self","s","useEffect","cachedData","unsubscribe","onAuthStateChanged","auth","filteredStudents","useMemo","base","term","a","b","handleRefresh","jsxs","jsx","_","i","FontAwesomeIcon","faExclamationTriangle","faSync","faSearch","e","faUserGraduate","faEnvelope","faIdCard","faGraduationCap","faCheckCircle","faArrowRight","faUsers"],"mappings":"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"}